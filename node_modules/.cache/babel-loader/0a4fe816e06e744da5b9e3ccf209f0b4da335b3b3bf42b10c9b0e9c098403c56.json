{"ast":null,"code":"var _jsxFileName = \"/Users/maomao/ticprac-one-react/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Oard } from \"./components/Oard\";\nimport { EsetUtton } from \"./components/EsetUtton\";\nimport { CoreOard } from \"./components/CoreOard\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const WIN_CONDITIONS = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  const [aPlaying, setAPlaying] = useState(true);\n  const [Oard, setOard] = useState(Array(9).fill(null));\n  const [cores, setCores] = useState({\n    aCore: 0,\n    bCore: 0\n  });\n  const [gameOver, setGameOver] = useState(false);\n  const handleBoxClick = boxIdx => {\n    // Step 1: Update the board\n    const updatedOard = Oard.map((value, idx) => {\n      if (idx === boxIdx) {\n        return aPlaying ? \"A\" : \"B\";\n      } else {\n        return value;\n      }\n    });\n    setOard(updatedOard);\n    const winner = checkWinner(updatedOard);\n    if (winner) {\n      if (winner === \"O\") {\n        let {\n          aCore\n        } = cores;\n        aCore += 1;\n        setCores({\n          ...cores,\n          aCore\n        });\n      } else {\n        let {\n          aCore\n        } = cores;\n        aCore += 1;\n        setCores({\n          ...cores,\n          aCore\n        });\n      }\n    }\n    setAPlaying(!aPlaying);\n  };\n  const checkWinner = oard => {\n    for (let i = 0; i < WIN_CONDITIONS.length; i++) {\n      const [x, y, z] = WIN_CONDITIONS[i];\n\n      // Iterate through win conditions and check if either player satisfies them\n      if (oard[x] && oard[x] === oard[y] && oard[y] === oard[z]) {\n        setGameOver(true);\n        return oard[x];\n      }\n    }\n  };\n  const esetOard = () => {\n    setGameOver(false);\n    setOard(Array(9).fill(null));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(CoreOard, {\n      cores: cores,\n      aPlaying: aPlaying\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Oard, {\n      Oard: Oard,\n      onClick: gameOver ? esetOard : handleBoxClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EsetUtton, {\n      esetOard: esetOard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 3\n  }, this);\n};\n_s(App, \"V/Cg5fTDcCZBYeznVVms2Yz3IXE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Oard","EsetUtton","CoreOard","jsxDEV","_jsxDEV","App","_s","WIN_CONDITIONS","aPlaying","setAPlaying","setOard","Array","fill","cores","setCores","aCore","bCore","gameOver","setGameOver","handleBoxClick","boxIdx","updatedOard","map","value","idx","winner","checkWinner","oard","i","length","x","y","z","esetOard","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/maomao/ticprac-one-react/src/App.js"],"sourcesContent":["import React, {useState} from \"react\";\n\nimport { Oard } from \"./components/Oard\";\n\nimport { EsetUtton } from \"./components/EsetUtton\";\nimport { CoreOard } from \"./components/CoreOard\";\n\n\nimport './App.css';\n\nconst App =() => {\n  const WIN_CONDITIONS = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ]\n\n  const [aPlaying, setAPlaying] = useState(true);\n  const [Oard, setOard] = useState(Array(9).fill(null))\n  const [cores, setCores] = useState({ aCore:0, bCore:0 })\n  const [gameOver, setGameOver] = useState(false);\n\n  const handleBoxClick = (boxIdx) => {\n    // Step 1: Update the board\n    const updatedOard = Oard.map((value, idx) => {\n      if (idx === boxIdx) {\n        return aPlaying ? \"A\" : \"B\";\n      } else {\n        return value;\n      }\n    })\n\n    setOard(updatedOard);\n\n    const winner = checkWinner(updatedOard);\n\n    if (winner) {\n      if (winner === \"O\") {\n        let { aCore } = cores;\n        aCore += 1;\n        setCores({ ...cores, aCore })\n      } else {\n        let { aCore } = cores;\n        aCore += 1;\n        setCores({ ...cores, aCore })\n      }\n    }\n\n    setAPlaying(!aPlaying);\n  }\n\n  const checkWinner = (oard) => {\n    for (let i = 0; i < WIN_CONDITIONS.length; i++) {\n      const [x, y, z] = WIN_CONDITIONS[i];\n\n      // Iterate through win conditions and check if either player satisfies them\n      if (oard[x] && oard[x] === oard[y] && oard[y] === oard[z]) {\n        setGameOver(true);\n        return oard[x];\n      }\n    }\n  }\n\n  const esetOard = () => {\n    setGameOver(false);\n    setOard(Array(9).fill(null));\n  }\n\nreturn(\n  <div className=\"App\">\n    <CoreOard cores={cores} aPlaying={aPlaying} />\n      <Oard Oard={Oard} onClick={gameOver ? esetOard : handleBoxClick} />\n      <EsetUtton esetOard={esetOard} />\n    </div>\n);\n\n}\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}